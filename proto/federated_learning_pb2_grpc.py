# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import federated_learning_pb2 as federated__learning__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in federated_learning_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FederatedLearningStub(object):
    """Main federated learning service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/federated_learning.FederatedLearning/RegisterClient',
                request_serializer=federated__learning__pb2.ClientRegistration.SerializeToString,
                response_deserializer=federated__learning__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.UpdateClientCapabilities = channel.unary_unary(
                '/federated_learning.FederatedLearning/UpdateClientCapabilities',
                request_serializer=federated__learning__pb2.ClientCapabilities.SerializeToString,
                response_deserializer=federated__learning__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.GetTrainingStatus = channel.unary_unary(
                '/federated_learning.FederatedLearning/GetTrainingStatus',
                request_serializer=federated__learning__pb2.StatusRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.TrainingStatus.FromString,
                _registered_method=True)
        self.GetGlobalModel = channel.unary_unary(
                '/federated_learning.FederatedLearning/GetGlobalModel',
                request_serializer=federated__learning__pb2.ModelRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.ModelResponse.FromString,
                _registered_method=True)
        self.SubmitModelUpdate = channel.unary_unary(
                '/federated_learning.FederatedLearning/SubmitModelUpdate',
                request_serializer=federated__learning__pb2.ModelUpdate.SerializeToString,
                response_deserializer=federated__learning__pb2.UpdateAck.FromString,
                _registered_method=True)
        self.JoinTrainingRound = channel.unary_unary(
                '/federated_learning.FederatedLearning/JoinTrainingRound',
                request_serializer=federated__learning__pb2.RoundJoinRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.RoundJoinResponse.FromString,
                _registered_method=True)
        self.GetRoundConfig = channel.unary_unary(
                '/federated_learning.FederatedLearning/GetRoundConfig',
                request_serializer=federated__learning__pb2.RoundConfigRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.RoundConfig.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/federated_learning.FederatedLearning/HealthCheck',
                request_serializer=federated__learning__pb2.HealthRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/federated_learning.FederatedLearning/GetMetrics',
                request_serializer=federated__learning__pb2.MetricsRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.MetricsResponse.FromString,
                _registered_method=True)


class FederatedLearningServicer(object):
    """Main federated learning service
    """

    def RegisterClient(self, request, context):
        """Client registration and management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClientCapabilities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrainingStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGlobalModel(self, request, context):
        """Model distribution and updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitModelUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinTrainingRound(self, request, context):
        """Training round management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoundConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health and monitoring
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederatedLearningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=federated__learning__pb2.ClientRegistration.FromString,
                    response_serializer=federated__learning__pb2.RegistrationResponse.SerializeToString,
            ),
            'UpdateClientCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClientCapabilities,
                    request_deserializer=federated__learning__pb2.ClientCapabilities.FromString,
                    response_serializer=federated__learning__pb2.UpdateResponse.SerializeToString,
            ),
            'GetTrainingStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrainingStatus,
                    request_deserializer=federated__learning__pb2.StatusRequest.FromString,
                    response_serializer=federated__learning__pb2.TrainingStatus.SerializeToString,
            ),
            'GetGlobalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalModel,
                    request_deserializer=federated__learning__pb2.ModelRequest.FromString,
                    response_serializer=federated__learning__pb2.ModelResponse.SerializeToString,
            ),
            'SubmitModelUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitModelUpdate,
                    request_deserializer=federated__learning__pb2.ModelUpdate.FromString,
                    response_serializer=federated__learning__pb2.UpdateAck.SerializeToString,
            ),
            'JoinTrainingRound': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinTrainingRound,
                    request_deserializer=federated__learning__pb2.RoundJoinRequest.FromString,
                    response_serializer=federated__learning__pb2.RoundJoinResponse.SerializeToString,
            ),
            'GetRoundConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoundConfig,
                    request_deserializer=federated__learning__pb2.RoundConfigRequest.FromString,
                    response_serializer=federated__learning__pb2.RoundConfig.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=federated__learning__pb2.HealthRequest.FromString,
                    response_serializer=federated__learning__pb2.HealthResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=federated__learning__pb2.MetricsRequest.FromString,
                    response_serializer=federated__learning__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'federated_learning.FederatedLearning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('federated_learning.FederatedLearning', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FederatedLearning(object):
    """Main federated learning service
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/RegisterClient',
            federated__learning__pb2.ClientRegistration.SerializeToString,
            federated__learning__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateClientCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/UpdateClientCapabilities',
            federated__learning__pb2.ClientCapabilities.SerializeToString,
            federated__learning__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrainingStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/GetTrainingStatus',
            federated__learning__pb2.StatusRequest.SerializeToString,
            federated__learning__pb2.TrainingStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGlobalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/GetGlobalModel',
            federated__learning__pb2.ModelRequest.SerializeToString,
            federated__learning__pb2.ModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitModelUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/SubmitModelUpdate',
            federated__learning__pb2.ModelUpdate.SerializeToString,
            federated__learning__pb2.UpdateAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinTrainingRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/JoinTrainingRound',
            federated__learning__pb2.RoundJoinRequest.SerializeToString,
            federated__learning__pb2.RoundJoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoundConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/GetRoundConfig',
            federated__learning__pb2.RoundConfigRequest.SerializeToString,
            federated__learning__pb2.RoundConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/HealthCheck',
            federated__learning__pb2.HealthRequest.SerializeToString,
            federated__learning__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearning/GetMetrics',
            federated__learning__pb2.MetricsRequest.SerializeToString,
            federated__learning__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
